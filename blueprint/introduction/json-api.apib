# JSON API

The Kitsu API implements the JSON API specification. This means
there are some notable semantics to how you consume it, but
understanding it will take a lot of the work of using it out of your
hands.

These docs will include a short overview of the capabilities, but
you can consult the [JSON API Specification][jsonapi] for more
information.

You can be more specific about the data you want to retrieve by
using URL parameters and are outlined below.

**Note:** This documentation will display parameters with brackets
(`[` and `]`) for readability, but actual URLs will need to be
percent-encoded (`%5B` and `%5D`).

## Request Headers

As per the JSON API specification, all requests to the API should
contain these headers:

```
Accept: application/vnd.api+json
Content-Type: application/vnd.api+json
```

## Filtering and Search

Filtering lets you query data that contains certain matching
attributes or relationships. These take the form of
`filter[attribute]=value`. For example, you can request all the
anime of the Adventure genre:

```
/anime?filter[genres]=adventure
```

For some models, you can also search based on the query text:

```
/anime?filter[text]=cowboy%20bebop
```

## Pagination

You can choose how much of a resource to receive by specifying
pagination parameters. Pagination is supported via `limit` and
`offset`. Resources are paginated in groups of `10` by default and can be
increased to a maximum of `20`.

`/anime?page[limit]=5&page[offset]=0`

The response will include URLs for the first, next and last page of
resources in the `links` object based on your request.

```
"links": {
    "first": "https://kitsu.io/api/edge/anime?page[limit]=5&page[offset]=0",
    "next": "https://kitsu.io/api/edge/anime?page[limit]=5&page[offset]=5",
    "last": "https://kitsu.io/api/edge/anime?page[limit]=5&page[offset]=12062"
}
```

## Sorting

Sorting by attributes is also supported. By default, sorts are
applied in ascending order. You can request a descending order by
prepending `-` to the parameter. You can use a comma-delimited list
to sort by multiple attributes.

`/users?sort=-followersCount,-followingCount`

## Includes

You can include related resources with `include=[relationship]`.
You can also specify successive relationships using a `.`. A
comma-delimited list can be used to request multiple relationships.

`/library-entries?include=user,anime.genres`

## Sparse Fieldsets

You can request a resource to only return a specific set of fields
in its response. For example, to only receive a user's name and
creation date:

`/users?fields[users]=name,createdAt`

## Client Implementations

JSON API has a great advantage in that since its standardised,
API-agnostic tools can be made to abstract away the semantics of
consuming and working with the data. It is recommended that you use
a JSON API client to implement the Kitsu API for this reason.

Many implementations in over 13 languages can be found on the
[JSON API website][jsonapi-client].
